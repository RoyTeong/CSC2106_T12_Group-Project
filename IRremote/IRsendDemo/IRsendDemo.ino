/* IRremoteESP8266: IRsendDemo - demonstrates sending IR codes with IRsend.
 *
 * Version 1.1 January, 2019
 * Based on Ken Shirriff's IrsendDemo Version 0.1 July, 2009,
 * Copyright 2009 Ken Shirriff, http://arcfn.com
 *
 * An IR LED circuit *MUST* be connected to the ESP8266 on a pin
 * as specified by kIrLed below.
 *
 * TL;DR: The IR LED needs to be driven by a transistor for a good result.
 *
 * Suggested circuit:
 *     https://github.com/crankyoldgit/IRremoteESP8266/wiki#ir-sending
 *
 * Common mistakes & tips:
 *   * Don't just connect the IR LED directly to the pin, it won't
 *     have enough current to drive the IR LED effectively.
 *   * Make sure you have the IR LED polarity correct.
 *     See: https://learn.sparkfun.com/tutorials/polarity/diode-and-led-polarity
 *   * Typical digital camera/phones can be used to see if the IR LED is flashed.
 *     Replace the IR LED with a normal LED if you don't have a digital camera
 *     when debugging.
 *   * Avoid using the following pins unless you really know what you are doing:
 *     * Pin 0/D3: Can interfere with the boot/program mode & support circuits.
 *     * Pin 1/TX/TXD0: Any serial transmissions from the ESP8266 will interfere.
 *     * Pin 3/RX/RXD0: Any serial transmissions to the ESP8266 will interfere.
 *   * ESP-01 modules are tricky. We suggest you use a module with more GPIOs
 *     for your first time. e.g. ESP-12 etc.
 */

#include <Arduino.h>
#include <IRremoteESP8266.h>
#include <IRsend.h>
#include <M5StickCPlus.h>

const uint16_t kIrLed = 33;  // ESP8266 GPIO pin to use. Recommended: 4 (D2).

IRsend irsend(kIrLed);  // Set the GPIO to be used to sending the message.

bool ACState = false;


// Example of data captured by IRrecvDumpV2.ino
// uint16_t rawData[67] = {9000, 4500, 650, 550, 650, 1650, 600, 550, 650, 550,
//                         600, 1650, 650, 550, 600, 1650, 650, 1650, 650, 1650,
//                         600, 550, 650, 1650, 650, 1650, 650, 550, 600, 1650,
//                         650, 1650, 650, 550, 650, 550, 650, 1650, 650, 550,
//                         650, 550, 650, 550, 600, 550, 650, 550, 650, 550,
//                         650, 1650, 600, 550, 650, 1650, 650, 1650, 650, 1650,
//                         650, 1650, 650, 1650, 650, 1650, 600};

// uint16_t rawData[67] = {4526, 4476,  576, 1660,  574, 1662,  568, 1670,  
//                         574, 544,  576, 542,  568, 548,  572, 548,  576, 
//                         542,  578, 1660,  572, 1666,  568, 1668,  574, 
//                         542,  576, 540,  570, 548,  572, 546,  574, 546,  
//                         576, 542,  570, 1666,  574, 544,  578, 540,  570, 
//                         550,  570, 546,  574, 544,  576, 542,  570, 1666,  
//                         576, 542,  568, 1670,  572, 1664,  568, 1668,  576, 1662,  
//                         568, 1668,  574, 1660,  572};  // SAMSUNG TV

// uint16_t rawData[103] = {3556, 3530,  894, 2652,  888, 2654,  894, 878, 894, 
//                         2650,  888, 2654, 894, 2650, 890, 880,  888, 882,  896, 876,  
//                         892, 880,  888, 882,  888, 2654, 896, 878,  892, 878,  890, 2652, 
//                         896, 874,  894, 878,  892, 878,  890, 2652,  898, 2646,  892, 2650,  
//                         898, 2646,  892, 2650,  888, 884,  896, 39498,  3556, 3530,  892, 2650,  
//                         890, 2654,  896, 876,  892, 2652,  888, 2652,  898, 2646,  890, 908,  864, 
//                         908,  860, 912,  860, 912,  868, 904,  864, 2650,  888, 912,  868, 902,  868, 
//                         2648,  888, 912,  856, 916,  864, 908,  864, 2650,  888, 2654,  894, 2652,  
//                         886, 2656,  896, 2650,  888, 882,  886};  // KOK WALL FAN

uint16_t AC_ON_rawData[583] = {3406, 1688,  444, 1256,  450, 1248,  450, 404,  450, 396,  448, 400,  
                        440, 1260,  450, 400,  442, 408,  446, 1254,  442, 1254,  444, 404,  448, 
                        1252,  446, 402,  452, 398,  446, 1256,  450, 1248,  450, 400,  444, 1254,  
                        444, 1254,  442, 408,  446, 404,  448, 1250,  446, 402,  444, 406,  448, 
                        1254,  450, 396,  450, 400,  440, 410,  444, 402,  442, 412,  440, 402,  
                        450, 400,  442, 408,  446, 404,  448, 400,  444, 402,  452, 398,  444, 406,  
                        446, 400,  442, 410,  444, 402,  440, 410,  444, 404,  448, 404,  450, 396,  
                        446, 1256,  442, 404,  448, 400,  444, 406,  446, 402,  442, 408,  446, 1254,  
                        444, 1254,  442, 410,  442, 406,  446, 400,  446, 1254,  442, 1256,  442, 1256,  
                        450, 402,  440, 410,  444, 400,  442, 406,  446, 404,  450, 400,  444, 1256,  448, 
                        1248,  448, 400,  444, 1256,  450, 1248,  450, 404,  452, 394,  448, 1254,  444, 1252,  
                        446, 404,  448, 1250,  448, 1250,  448, 404,  448, 1252,  444, 400,  444, 406,  446, 404, 
                        448, 400,  444, 404,  448, 400,  444, 404,  446, 404,  450, 404,  440, 406,  448, 400,  
                        444, 404,  448, 400,  442, 412,  442, 406,  448, 400,  444, 406,  448, 400,  444, 406,  
                        448, 400,  442, 410,  444, 406,  448, 400,  444, 406,  446, 402,  442, 410,  442, 404,  
                        450, 400,  442, 408,  446, 400,  444, 410,  442, 404,  450, 402,  442, 406,  446, 404,  
                        440, 406,  446, 404,  442, 406,  444, 406,  448, 404,  440, 408,  444, 402,  440, 406,  
                        446, 402,  450, 400,  444, 408,  444, 402,  440, 410,  444, 404,  450, 398,  444, 408,  
                        444, 402,  442, 406,  446, 404,  440, 408,  442, 406,  448, 402,  444, 1258,  448, 398,  
                        444, 1254,  444, 408,  446, 402,  442, 1260,  446, 1252,  444, 1256,  440, 12728,  3406, 
                        1692,  448, 1252,  446, 1252,  446, 404,  448, 402,  442, 408,  444, 1254,  444, 402,  450, 
                        400,  442, 1256,  442, 1258,  448, 400,  444, 1256,  440, 408,  446, 404,  450, 1248,  448, 
                        1250,  448, 404,  448, 1252,  444, 1254,  444, 404,  440, 410,  442, 1260,  450, 396,  446, 
                        400,  442, 1258,  448, 402,  440, 406,  448, 400,  442, 406,  446, 404,  450, 402,  442, 404,  
                        448, 404,  450, 400,  444, 408,  444, 400,  444, 408,  444, 404,  448, 398,  448, 400,  440, 408,  
                        446, 406,  446, 402,  442, 404,  448, 402,  442, 1258,  448, 400,  442, 406,  446, 402,  444, 408,  
                        446, 400,  450, 1250,  448, 1254,  444, 408,  446, 398,  446, 402,  452, 1246,  448, 1254,  446, 1254,  
                        450, 398,  446, 404,  448, 400,  444, 404,  446, 402,  442, 410,  444, 1254,  444, 1252,  446, 402,  450, 
                        1250,  446, 1254,  444, 404,  448, 402,  442, 1258,  450, 1248,  450, 400,  442, 1258,  450, 1248,  450, 400,  
                        440, 1258,  450, 398,  446, 402,  450, 404,  438, 408,  446, 404,  452, 392,  446, 404,  450, 402,  442, 406,  
                        448, 398,  442, 410,  444, 402,  440, 412,  442, 406,  448, 400,  442, 408,  446, 402,  440, 410,  444, 410,  
                        444, 402,  450, 400,  444, 402,  450, 400,  444, 408,  444, 402,  442, 408,  448, 402,  450, 396,  448, 402,  
                        450, 400,  444, 406,  446, 404,  450, 398,  446, 406,  470, 376,  476, 378,  474, 370,  474, 376,  478, 374,  
                        478, 368,  476, 374,  470, 378,  476, 374,  478, 370,  472, 374,  478, 372,  470, 378,  476, 374,  478, 370,  
                        474, 378,  474, 374,  478, 370,  474, 376,  468, 380,  474, 380,  472, 376,  478, 370,  474, 1224,  474, 374,  
                        478, 1220,  478, 374,  478, 370,  472, 1224,  472, 1226,  472, 1228,  478};  // MITSUBISHI_AC_ON

uint16_t AC_OFF_rawData[583] = {3402, 1688,  442, 1256,  440, 1256,  454, 396,  446, 402,  450, 400,  444, 1254,  442, 410,  444, 400,  452, 1248,  450, 
                        1254,  442, 402,  448, 1252,  448, 400,  442, 406,  448, 1252,  446, 1252,  444, 404,  448, 1250,  446, 1252,  446, 404,  
                        450, 404,  450, 1246,  450, 396,  446, 404,  440, 1258,  452, 398,  444, 404,  448, 402,  452, 396,  446, 404,  450, 400,  
                        444, 406,  448, 400,  444, 406,  448, 404,  450, 396,  446, 404,  448, 398,  446, 404,  448, 404,  440, 406,  448, 400,  
                        442, 408,  444, 404,  448, 400,  444, 404,  450, 398,  444, 410,  444, 404,  450, 400,  444, 404,  450, 1252,  448, 1252,  
                        444, 404,  450, 402,  442, 404,  450, 1252,  444, 1256,  442, 1260,  448, 394,  448, 402,  440, 410,  444, 404,  448, 400,  
                        444, 404,  448, 1252,  448, 1252,  442, 404,  448, 1250,  448, 1252,  446, 402,  450, 400,  442, 1258,  450, 1248,  450, 398,  
                        444, 1256,  452, 1246,  450, 400,  442, 1254,  444, 406,  448, 400,  444, 410,  440, 406,  448, 398,  444, 404,  450, 398,  444, 
                        412,  442, 402,  442, 408,  444, 404,  450, 398,  444, 404,  448, 400,  444, 408,  444, 406,  448, 398,  446, 404,  448, 400,  
                        444, 410,  444, 400,  442, 406,  446, 404,  450, 400,  444, 404,  448, 400,  442, 406,  448, 404,  440, 408,  444, 404,  452, 396,  
                        444, 404,  450, 398,  442, 408,  446, 404,  452, 396,  446, 404,  450, 398,  444, 408,  444, 404,  450, 398,  444, 402,  450, 398,  
                        446, 404,  448, 402,  442, 408,  446, 402,  450, 398,  446, 406,  448, 398,  444, 410,  444, 400,  440, 410,  444, 404,  450, 398,  
                        446, 410,  444, 400,  442, 1256,  440, 408,  446, 1252,  444, 406,  446, 402,  450, 400,  444, 1254,  444, 1258,  452, 12722,  3400, 
                        1722,  418, 1280,  416, 1282,  416, 406,  446, 404,  450, 396,  446, 1256,  440, 404,  450, 400,  444, 1256,  450, 1278,  418, 400,  
                        444, 1256,  440, 410,  444, 406,  448, 1250,  446, 1282,  416, 402,  452, 1252,  444, 1280,  418, 400,  444, 406,  448, 1252,  444, 406,  
                        448, 400,  442, 1256,  442, 408,  442, 404,  450, 398,  444, 404,  448, 402,  442, 408,  444, 402,  450, 398,  444, 404,  448, 400,  444, 404,  
                        446, 404,  440, 410,  444, 404,  448, 402,  442, 406,  446, 400,  442, 412,  442, 406,  446, 400,  446, 402,  450, 398,  444, 406,  448, 404,  
                        450, 402,  442, 406,  446, 1250,  446, 1284,  414, 404,  448, 400,  446, 406,  446, 1250,  446, 1280,  418, 1282,  416, 404,  448, 400,  442, 406,  
                        448, 404,  452, 402,  440, 404,  448, 1252,  446, 1282,  414, 404,  450, 1250,  446, 1278,  418, 404,  450, 396,  446, 1254,  444, 1286,  422, 396,  
                        446, 1252,  444, 1286,  422, 402,  442, 1256,  440, 406,  450, 398,  444, 404,  448, 400,  444, 406,  446, 404,  448, 400,  442, 404,  450, 400,  444, 
                        404,  448, 406,  446, 398,  446, 404,  450, 398,  442, 406,  450, 402,  450, 396,  446, 402,  440, 408,  444, 404,  450, 400,  442, 406,  448, 400,  444, 
                        408,  444, 402,  450, 400,  444, 404,  450, 398,  444, 408,  444, 406,  448, 398,  446, 402,  452, 398,  442, 406,  450, 398,  442, 408,  446, 404,  452, 398,  
                        444, 404,  448, 400,  442, 406,  450, 404,  450, 396,  446, 402,  452, 400,  442, 404,  448, 404,  450, 396,  448, 402,  450, 398,  446, 406,  448, 398,  444, 408,  
                        446, 402,  440, 408,  448, 402,  450, 400,  442, 1258,  500, 346,  448, 1252,  498, 350,  452, 396,  444, 404,  448, 1252,  498, 1228,  470};  // MITSUBISHI_AC_OFF

// Example Samsung A/C state captured from IRrecvDumpV2.ino
// uint8_t samsungState[kSamsungAcStateLength] = {
//     0x02, 0x92, 0x0F, 0x00, 0x00, 0x00, 0xF0,
//     0x01, 0xE2, 0xFE, 0x71, 0x40, 0x11, 0xF0};

void setup() {
  irsend.begin();
  M5.begin();

  M5.Lcd.setRotation(3);
  M5.Lcd.fillScreen(BLACK);
  M5.Lcd.setCursor(0, 0, 2);
  M5.Lcd.printf("Sending Start", 0);

  pinMode(M5_BUTTON_HOME, INPUT);
  pinMode(M5_LED, OUTPUT); // setting the M5_LED as output mode
#if ESP8266
  Serial.begin(115200, SERIAL_8N1, SERIAL_TX_ONLY);
#else  // ESP8266
  Serial.begin(115200, SERIAL_8N1);
#endif  // ESP8266
}

void loop() {
  // Serial.println("NEC");
  // irsend.sendNEC(0x00FFE01FUL);
  // delay(2000);
  // Serial.println("Sony");
  // irsend.sendSony(0xa90, 12, 2);  // 12 bits & 2 repeats
  // delay(2000);
  if(digitalRead(M5_BUTTON_HOME) == LOW){
    M5.Lcd.print("Sending Signal");

    if (ACState == false) {
      irsend.sendRaw(AC_ON_rawData, 583, 38);
      ACState = !ACState;
    } else {
      irsend.sendRaw(AC_OFF_rawData, 583, 38);
      ACState = !ACState;
    }
    
    // irsend.sendRaw(AC_OFF_rawData, 583, 38);
    digitalWrite(M5_LED, !digitalRead(M5_LED));
    while(digitalRead(M5_BUTTON_HOME) == LOW);
  }
  // Serial.println("a Samsung A/C state from IRrecvDumpV2");
  // irsend.sendSamsungAC(samsungState);
  // delay(2000);
}
